#!/usr/bin/env node

var nopt = require('nopt');
var noptUsage = require('nopt-usage');

var fs = require('fs');
var path = require('path');
var chalk = require('chalk');

var cwd = process.cwd();

var plumber;
try {
    // Try to load plumber lib from local modules first
    plumber = require(path.join(cwd, 'node_modules', 'plumber'));
} catch (e) {
    try {
        // If that fails, try to load a globally installed plumber
        plumber = require('plumber');
    } catch(e) {
        // Argh!
        printError("Plumber not found!");
        printError("Please npm install plumber");
        process.exit(1);
    }
}

var Rx = plumber.Rx;

var options = {
    version:  Boolean,
    help:     Boolean,
    list:     Boolean,
    watch:    Boolean,
    plumbing: path
};
var shortHands = {
    V: '--version',
    h: '--help',
    l: '--list',
    w: '--watch'
};
var descriptions = {
    version:  'Display version information',
    help:     'Display usage help',
    list:     'List available pipelines',
    watch:    'Watch files for changes and re-run affected pipelines',
    plumbing: 'Override path to the plumbing file'
};

var cli = nopt(options, shortHands, process.argv, 2);


// Version information
if (cli.version) {
    var cliPackage = require('../package');
    console.log('plumber-cli', 'v' + cliPackage.version);
    console.log('plumber', 'v' + plumber.VERSION);
    process.exit(0);
}


// Usage information
if (cli.help) {
    var usage = noptUsage(options, shortHands, descriptions);
    console.log("Usage: plumber [options] [pipelines]...");
    console.log();
    console.log("Available options:");
    console.log(usage);
    process.exit(0);
}


try {
    var plumbingFile = cli.plumbing || findFileInOrAbove('Plumbing.js', cwd);
    if (plumbingFile) {
        var spec = require(plumbingFile);
    } else {
        printError('No plumbing file in current directory or above');
        process.exit(1);
    }
} catch(e) {
    if (e.code === 'MODULE_NOT_FOUND' &&
        e.message === "Cannot find module '"+plumbingFile+"'") {
        printError('No plumbing file found at ' + plumbingFile);
    } else {
        printError('Error while loading the plumbing file:');
        printError(e.stack);
    }
    process.exit(1);
}


// Read pipelines from plumbing file
var pipelines = {};

spec(pipelines);


// List pipelines only
if (cli.list) {
    console.log("Available pipelines:");
    console.log();

    Object.keys(pipelines).forEach(function(name) {
        console.log(name);
    });
    process.exit(0);
}

var pipelineArgs = cli.argv.remain;
if (pipelineArgs.length === 0) {
    // Run all pipelines
    pipelineArgs = Object.keys(pipelines);
}


var executionPipelines = pipelineArgs.map(function(pipelineArg) {
    var pipeline = pipelines[pipelineArg];
    if (! pipeline) {
        throw new Error('Pipeline not defined: ' + pipelineArg);
    }

    console.log(chalk.green("Run pipeline: " + pipelineArg));


    var outputReports = plumber.outputReports;
    var warnRemainingResources = plumber.warnRemainingResources;

    // Append output operations
    var verbosePipeline = [
        pipeline,
        outputReports(),
        warnRemainingResources()
    ];


    var runner = plumber.parse(verbosePipeline);
    return runner.run();
});

var combinedExecutions = Rx.Observable.combineLatest(executionPipelines, Rx.Observable.merge);

var processedExecutions;
if (cli.watch) {
    processedExecutions = combinedExecutions;
} else {
    // if not watching, run one execution only
    processedExecutions = combinedExecutions.take(1);
}


var hadErrors = false;

processedExecutions.
    mergeAll(). // flatten executions into a stream of resources
    // TODO: upgrade Rx to use subscribeOnCompleted
    catch(function(error) {
        printError("Plumber failed:", error.stack);
        hadErrors = true;
        return Rx.Observable.empty();
    }).
    subscribe(
        function onNext(resource) { /* noop */ },
        function onError(error) { /* noop */ },
        function onCompleted() {
            // Exit explicitly as there may be pending Gaze handlers that keep
            // the process running
            // TODO: avoid pending gazes so this isn't necessary
            var ret = hadErrors ? 1 : 0;
            process.exit(ret);
        }
    );



function findFileInOrAbove(filename, dir) {
    var filePath = path.join(dir, filename);
    if (fs.existsSync(filePath)) {
        return filePath;
    } else {
        var parentDir = path.dirname(dir);
        if (parentDir !== dir) {
            return findFileInOrAbove(filename, parentDir);
        }
    }
}


function printError(/* args */) {
    console.error(chalk.red.apply(null, arguments));
}
